{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "id": "3HP6ah06Hw6q"
   },
   "outputs": [],
   "source": [
    "from sklearn.svm import SVC\n",
    "from sklearn.metrics import accuracy_score\n",
    "from sklearn.model_selection import train_test_split\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-11-14 00:40:34.866 \n",
      "  \u001b[33m\u001b[1mWarning:\u001b[0m to view this Streamlit app on a browser, run it with the following\n",
      "  command:\n",
      "\n",
      "    streamlit run C:\\Users\\Manan\\anaconda3\\Lib\\site-packages\\ipykernel_launcher.py [ARGUMENTS]\n"
     ]
    }
   ],
   "source": [
    "import yfinance as yf\n",
    "import streamlit as st\n",
    "\n",
    "# Streamlit title and instructions\n",
    "st.title(\"Indian Stock Data Retriever\")\n",
    "st.write(\"Enter the stock symbol of an Indian company (e.g., INFY.NS) to retrieve historical data.\")\n",
    "\n",
    "# Stock symbol input\n",
    "stock_symbol = st.text_input(\"Stock Symbol\", value=\"INFY.NS\")  # Default to \"INFY.NS\" for user convenience\n",
    "\n",
    "# Download data on button click\n",
    "if st.button(\"Get Data\"):\n",
    "    try:\n",
    "        # Download historical data from Yahoo Finance\n",
    "        data = yf.download(stock_symbol, start=\"2000-01-01\")\n",
    "        \n",
    "        # Display the data\n",
    "        st.write(f\"Historical data for {stock_symbol}:\")\n",
    "        st.dataframe(data.head())\n",
    "        \n",
    "        # Save the data to a CSV file\n",
    "        csv_filename = f\"{stock_symbol}_historical_data.csv\"\n",
    "        data.to_csv(csv_filename)\n",
    "        \n",
    "        # Provide a download link for the CSV file\n",
    "        st.success(f\"Data saved to {csv_filename}.\")\n",
    "        with open(csv_filename, 'rb') as file:\n",
    "            st.download_button(\n",
    "                label=\"Download CSV\",\n",
    "                data=file,\n",
    "                file_name=csv_filename,\n",
    "                mime=\"text/csv\"\n",
    "            )\n",
    "    except Exception as e:\n",
    "        st.error(f\"Error retrieving data: {e}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "df= pd.read_csv(fr\"C:\\Users\\Manan\\Downloads\\{stock_symbol}_historical_data.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 617
    },
    "id": "oNmBdeLAIA_v",
    "outputId": "27a7d490-3cb8-4c63-9f5b-acbf88176fdc"
   },
   "outputs": [],
   "source": [
    "df = df.drop([0,1]).reset_index(drop=True)# Drop the first row (misaligned row)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 617
    },
    "id": "oNmBdeLAIA_v",
    "outputId": "27a7d490-3cb8-4c63-9f5b-acbf88176fdc"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "         Date      Price       Close        High         Low        Open  \\\n",
      "0  2000-01-03  80.323105  122.071877  122.071877  122.070312  122.070312   \n",
      "1  2000-01-04  86.649651  131.686722  131.837891  126.976562  131.250000   \n",
      "2  2000-01-05  79.717812  121.151955  126.953125  121.151955  122.664062   \n",
      "3  2000-01-06  73.340363  111.459763  119.531250  111.459763  119.192581   \n",
      "4  2000-01-07  67.473145  102.542969  102.542969  102.542969  102.542969   \n",
      "\n",
      "       Volume  \n",
      "0    657536.0  \n",
      "1   7191808.0  \n",
      "2  21069440.0  \n",
      "3  10495616.0  \n",
      "4    971392.0  \n"
     ]
    }
   ],
   "source": [
    "df.columns = [\"Date\", \"Price\", \"Close\", \"High\", \"Low\", \"Open\", \"Volume\"]  # Rename columns\n",
    "\n",
    "# Reset the index for proper display\n",
    "df.reset_index(drop=True, inplace=True)\n",
    "\n",
    "# Convert the \"Date\" column to datetime format\n",
    "df['Date'] = pd.to_datetime(df['Date'], errors='coerce').dt.date\n",
    "df[['Price', 'Close', 'High', 'Low', 'Open', 'Volume']] = df[['Price', 'Close', 'High', 'Low', 'Open', 'Volume']].astype(float)\n",
    "\n",
    "# Display the first few rows of the cleaned data\n",
    "print(df.head())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 237
    },
    "id": "CM0R0xL6IDeU",
    "outputId": "4a064db5-aa14-46f8-dd5c-f78d9860152b"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Open-Close</th>\n",
       "      <th>High-Low</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>-0.001564</td>\n",
       "      <td>0.001564</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>-0.436722</td>\n",
       "      <td>4.861328</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1.512108</td>\n",
       "      <td>5.801170</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>7.732819</td>\n",
       "      <td>8.071487</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Open-Close  High-Low\n",
       "0   -0.001564  0.001564\n",
       "1   -0.436722  4.861328\n",
       "2    1.512108  5.801170\n",
       "3    7.732819  8.071487\n",
       "4    0.000000  0.000000"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df['Open-Close'] = df.Open - df.Close\n",
    "df['High-Low'] = df.High - df.Low\n",
    "X = df[['Open-Close', 'High-Low']]\n",
    "X.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "wpVvrUV8IEsi",
    "outputId": "f8e3460b-2fa2-4f10-8c48-577bb130e419"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1, 0, 0, ..., 1, 0, 0])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y = np.where(df['Close'].shift(-1) > df['Close'], 1, 0)\n",
    "y"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "id": "U-NlRhYwIFwn"
   },
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.85, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "id": "F0ODVUJSIGsP"
   },
   "outputs": [],
   "source": [
    "# Support vector classifier\n",
    "cls = SVC().fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {
    "id": "qzVw3m-VIHmr"
   },
   "outputs": [],
   "source": [
    "df['Predicted_Signal'] = cls.predict(X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {
    "id": "lNFov1BPIIyA"
   },
   "outputs": [],
   "source": [
    "# Calculate daily returns\n",
    "df['Return'] = df.Close.pct_change()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {
    "id": "Tt0CK_MTIJol"
   },
   "outputs": [],
   "source": [
    "# Calculate strategy returns\n",
    "df['Strategy_Return'] = df.Return *df.Predicted_Signal.shift(1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 648
    },
    "id": "VeFfAuicIKgs",
    "outputId": "0cdaea25-8723-4ede-a1b0-83e1011314ad"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Price</th>\n",
       "      <th>Close</th>\n",
       "      <th>High</th>\n",
       "      <th>Low</th>\n",
       "      <th>Open</th>\n",
       "      <th>Volume</th>\n",
       "      <th>Open-Close</th>\n",
       "      <th>High-Low</th>\n",
       "      <th>Predicted_Signal</th>\n",
       "      <th>Return</th>\n",
       "      <th>Strategy_Return</th>\n",
       "      <th>Cum_Ret</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2000-01-03</td>\n",
       "      <td>80.323105</td>\n",
       "      <td>122.071877</td>\n",
       "      <td>122.071877</td>\n",
       "      <td>122.070312</td>\n",
       "      <td>122.070312</td>\n",
       "      <td>657536.0</td>\n",
       "      <td>-0.001564</td>\n",
       "      <td>0.001564</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2000-01-04</td>\n",
       "      <td>86.649651</td>\n",
       "      <td>131.686722</td>\n",
       "      <td>131.837891</td>\n",
       "      <td>126.976562</td>\n",
       "      <td>131.250000</td>\n",
       "      <td>7191808.0</td>\n",
       "      <td>-0.436722</td>\n",
       "      <td>4.861328</td>\n",
       "      <td>1</td>\n",
       "      <td>0.078764</td>\n",
       "      <td>0.078764</td>\n",
       "      <td>0.078764</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2000-01-05</td>\n",
       "      <td>79.717812</td>\n",
       "      <td>121.151955</td>\n",
       "      <td>126.953125</td>\n",
       "      <td>121.151955</td>\n",
       "      <td>122.664062</td>\n",
       "      <td>21069440.0</td>\n",
       "      <td>1.512108</td>\n",
       "      <td>5.801170</td>\n",
       "      <td>1</td>\n",
       "      <td>-0.079999</td>\n",
       "      <td>-0.079999</td>\n",
       "      <td>-0.001235</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2000-01-06</td>\n",
       "      <td>73.340363</td>\n",
       "      <td>111.459763</td>\n",
       "      <td>119.531250</td>\n",
       "      <td>111.459763</td>\n",
       "      <td>119.192581</td>\n",
       "      <td>10495616.0</td>\n",
       "      <td>7.732819</td>\n",
       "      <td>8.071487</td>\n",
       "      <td>1</td>\n",
       "      <td>-0.080000</td>\n",
       "      <td>-0.080000</td>\n",
       "      <td>-0.081235</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2000-01-07</td>\n",
       "      <td>67.473145</td>\n",
       "      <td>102.542969</td>\n",
       "      <td>102.542969</td>\n",
       "      <td>102.542969</td>\n",
       "      <td>102.542969</td>\n",
       "      <td>971392.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>-0.080000</td>\n",
       "      <td>-0.080000</td>\n",
       "      <td>-0.161235</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6203</th>\n",
       "      <td>2024-11-07</td>\n",
       "      <td>1803.050049</td>\n",
       "      <td>1803.050049</td>\n",
       "      <td>1825.699951</td>\n",
       "      <td>1787.000000</td>\n",
       "      <td>1812.949951</td>\n",
       "      <td>4550965.0</td>\n",
       "      <td>9.899902</td>\n",
       "      <td>38.699951</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.011323</td>\n",
       "      <td>-0.011323</td>\n",
       "      <td>4.308342</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6204</th>\n",
       "      <td>2024-11-08</td>\n",
       "      <td>1829.949951</td>\n",
       "      <td>1829.949951</td>\n",
       "      <td>1840.599976</td>\n",
       "      <td>1813.150024</td>\n",
       "      <td>1818.000000</td>\n",
       "      <td>4210960.0</td>\n",
       "      <td>-11.949951</td>\n",
       "      <td>27.449951</td>\n",
       "      <td>0</td>\n",
       "      <td>0.014919</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>4.323261</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6205</th>\n",
       "      <td>2024-11-11</td>\n",
       "      <td>1860.099976</td>\n",
       "      <td>1860.099976</td>\n",
       "      <td>1868.000000</td>\n",
       "      <td>1822.550049</td>\n",
       "      <td>1829.000000</td>\n",
       "      <td>3804234.0</td>\n",
       "      <td>-31.099976</td>\n",
       "      <td>45.449951</td>\n",
       "      <td>0</td>\n",
       "      <td>0.016476</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>4.339737</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6206</th>\n",
       "      <td>2024-11-12</td>\n",
       "      <td>1868.800049</td>\n",
       "      <td>1868.800049</td>\n",
       "      <td>1881.000000</td>\n",
       "      <td>1861.000000</td>\n",
       "      <td>1871.099976</td>\n",
       "      <td>5012450.0</td>\n",
       "      <td>2.299927</td>\n",
       "      <td>20.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>0.004677</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>4.344414</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6207</th>\n",
       "      <td>2024-11-13</td>\n",
       "      <td>1868.400024</td>\n",
       "      <td>1868.400024</td>\n",
       "      <td>1873.199951</td>\n",
       "      <td>1856.300049</td>\n",
       "      <td>1861.099976</td>\n",
       "      <td>4256877.0</td>\n",
       "      <td>-7.300049</td>\n",
       "      <td>16.899902</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.000214</td>\n",
       "      <td>-0.000214</td>\n",
       "      <td>4.344200</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>6208 rows × 13 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            Date        Price        Close         High          Low  \\\n",
       "0     2000-01-03    80.323105   122.071877   122.071877   122.070312   \n",
       "1     2000-01-04    86.649651   131.686722   131.837891   126.976562   \n",
       "2     2000-01-05    79.717812   121.151955   126.953125   121.151955   \n",
       "3     2000-01-06    73.340363   111.459763   119.531250   111.459763   \n",
       "4     2000-01-07    67.473145   102.542969   102.542969   102.542969   \n",
       "...          ...          ...          ...          ...          ...   \n",
       "6203  2024-11-07  1803.050049  1803.050049  1825.699951  1787.000000   \n",
       "6204  2024-11-08  1829.949951  1829.949951  1840.599976  1813.150024   \n",
       "6205  2024-11-11  1860.099976  1860.099976  1868.000000  1822.550049   \n",
       "6206  2024-11-12  1868.800049  1868.800049  1881.000000  1861.000000   \n",
       "6207  2024-11-13  1868.400024  1868.400024  1873.199951  1856.300049   \n",
       "\n",
       "             Open      Volume  Open-Close   High-Low  Predicted_Signal  \\\n",
       "0      122.070312    657536.0   -0.001564   0.001564                 1   \n",
       "1      131.250000   7191808.0   -0.436722   4.861328                 1   \n",
       "2      122.664062  21069440.0    1.512108   5.801170                 1   \n",
       "3      119.192581  10495616.0    7.732819   8.071487                 1   \n",
       "4      102.542969    971392.0    0.000000   0.000000                 1   \n",
       "...           ...         ...         ...        ...               ...   \n",
       "6203  1812.949951   4550965.0    9.899902  38.699951                 0   \n",
       "6204  1818.000000   4210960.0  -11.949951  27.449951                 0   \n",
       "6205  1829.000000   3804234.0  -31.099976  45.449951                 0   \n",
       "6206  1871.099976   5012450.0    2.299927  20.000000                 1   \n",
       "6207  1861.099976   4256877.0   -7.300049  16.899902                 0   \n",
       "\n",
       "        Return  Strategy_Return   Cum_Ret  \n",
       "0          NaN              NaN       NaN  \n",
       "1     0.078764         0.078764  0.078764  \n",
       "2    -0.079999        -0.079999 -0.001235  \n",
       "3    -0.080000        -0.080000 -0.081235  \n",
       "4    -0.080000        -0.080000 -0.161235  \n",
       "...        ...              ...       ...  \n",
       "6203 -0.011323        -0.011323  4.308342  \n",
       "6204  0.014919         0.000000  4.323261  \n",
       "6205  0.016476         0.000000  4.339737  \n",
       "6206  0.004677         0.000000  4.344414  \n",
       "6207 -0.000214        -0.000214  4.344200  \n",
       "\n",
       "[6208 rows x 13 columns]"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Calculate Cumulutive returns\n",
    "df['Cum_Ret'] = df['Return'].cumsum()\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 648
    },
    "id": "uhDQtV01ILgU",
    "outputId": "8140464f-a9ba-45c9-ea12-fc66fb73bca2"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Date</th>\n",
       "      <th>Price</th>\n",
       "      <th>Close</th>\n",
       "      <th>High</th>\n",
       "      <th>Low</th>\n",
       "      <th>Open</th>\n",
       "      <th>Volume</th>\n",
       "      <th>Open-Close</th>\n",
       "      <th>High-Low</th>\n",
       "      <th>Predicted_Signal</th>\n",
       "      <th>Return</th>\n",
       "      <th>Strategy_Return</th>\n",
       "      <th>Cum_Ret</th>\n",
       "      <th>Cum_Strategy</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2000-01-03</td>\n",
       "      <td>80.323105</td>\n",
       "      <td>122.071877</td>\n",
       "      <td>122.071877</td>\n",
       "      <td>122.070312</td>\n",
       "      <td>122.070312</td>\n",
       "      <td>657536.0</td>\n",
       "      <td>-0.001564</td>\n",
       "      <td>0.001564</td>\n",
       "      <td>1</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2000-01-04</td>\n",
       "      <td>86.649651</td>\n",
       "      <td>131.686722</td>\n",
       "      <td>131.837891</td>\n",
       "      <td>126.976562</td>\n",
       "      <td>131.250000</td>\n",
       "      <td>7191808.0</td>\n",
       "      <td>-0.436722</td>\n",
       "      <td>4.861328</td>\n",
       "      <td>1</td>\n",
       "      <td>0.078764</td>\n",
       "      <td>0.078764</td>\n",
       "      <td>0.078764</td>\n",
       "      <td>0.078764</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2000-01-05</td>\n",
       "      <td>79.717812</td>\n",
       "      <td>121.151955</td>\n",
       "      <td>126.953125</td>\n",
       "      <td>121.151955</td>\n",
       "      <td>122.664062</td>\n",
       "      <td>21069440.0</td>\n",
       "      <td>1.512108</td>\n",
       "      <td>5.801170</td>\n",
       "      <td>1</td>\n",
       "      <td>-0.079999</td>\n",
       "      <td>-0.079999</td>\n",
       "      <td>-0.001235</td>\n",
       "      <td>-0.001235</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>2000-01-06</td>\n",
       "      <td>73.340363</td>\n",
       "      <td>111.459763</td>\n",
       "      <td>119.531250</td>\n",
       "      <td>111.459763</td>\n",
       "      <td>119.192581</td>\n",
       "      <td>10495616.0</td>\n",
       "      <td>7.732819</td>\n",
       "      <td>8.071487</td>\n",
       "      <td>1</td>\n",
       "      <td>-0.080000</td>\n",
       "      <td>-0.080000</td>\n",
       "      <td>-0.081235</td>\n",
       "      <td>-0.081235</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>2000-01-07</td>\n",
       "      <td>67.473145</td>\n",
       "      <td>102.542969</td>\n",
       "      <td>102.542969</td>\n",
       "      <td>102.542969</td>\n",
       "      <td>102.542969</td>\n",
       "      <td>971392.0</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>-0.080000</td>\n",
       "      <td>-0.080000</td>\n",
       "      <td>-0.161235</td>\n",
       "      <td>-0.161235</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6203</th>\n",
       "      <td>2024-11-07</td>\n",
       "      <td>1803.050049</td>\n",
       "      <td>1803.050049</td>\n",
       "      <td>1825.699951</td>\n",
       "      <td>1787.000000</td>\n",
       "      <td>1812.949951</td>\n",
       "      <td>4550965.0</td>\n",
       "      <td>9.899902</td>\n",
       "      <td>38.699951</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.011323</td>\n",
       "      <td>-0.011323</td>\n",
       "      <td>4.308342</td>\n",
       "      <td>4.837418</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6204</th>\n",
       "      <td>2024-11-08</td>\n",
       "      <td>1829.949951</td>\n",
       "      <td>1829.949951</td>\n",
       "      <td>1840.599976</td>\n",
       "      <td>1813.150024</td>\n",
       "      <td>1818.000000</td>\n",
       "      <td>4210960.0</td>\n",
       "      <td>-11.949951</td>\n",
       "      <td>27.449951</td>\n",
       "      <td>0</td>\n",
       "      <td>0.014919</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>4.323261</td>\n",
       "      <td>4.837418</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6205</th>\n",
       "      <td>2024-11-11</td>\n",
       "      <td>1860.099976</td>\n",
       "      <td>1860.099976</td>\n",
       "      <td>1868.000000</td>\n",
       "      <td>1822.550049</td>\n",
       "      <td>1829.000000</td>\n",
       "      <td>3804234.0</td>\n",
       "      <td>-31.099976</td>\n",
       "      <td>45.449951</td>\n",
       "      <td>0</td>\n",
       "      <td>0.016476</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>4.339737</td>\n",
       "      <td>4.837418</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6206</th>\n",
       "      <td>2024-11-12</td>\n",
       "      <td>1868.800049</td>\n",
       "      <td>1868.800049</td>\n",
       "      <td>1881.000000</td>\n",
       "      <td>1861.000000</td>\n",
       "      <td>1871.099976</td>\n",
       "      <td>5012450.0</td>\n",
       "      <td>2.299927</td>\n",
       "      <td>20.000000</td>\n",
       "      <td>1</td>\n",
       "      <td>0.004677</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>4.344414</td>\n",
       "      <td>4.837418</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6207</th>\n",
       "      <td>2024-11-13</td>\n",
       "      <td>1868.400024</td>\n",
       "      <td>1868.400024</td>\n",
       "      <td>1873.199951</td>\n",
       "      <td>1856.300049</td>\n",
       "      <td>1861.099976</td>\n",
       "      <td>4256877.0</td>\n",
       "      <td>-7.300049</td>\n",
       "      <td>16.899902</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.000214</td>\n",
       "      <td>-0.000214</td>\n",
       "      <td>4.344200</td>\n",
       "      <td>4.837203</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>6208 rows × 14 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            Date        Price        Close         High          Low  \\\n",
       "0     2000-01-03    80.323105   122.071877   122.071877   122.070312   \n",
       "1     2000-01-04    86.649651   131.686722   131.837891   126.976562   \n",
       "2     2000-01-05    79.717812   121.151955   126.953125   121.151955   \n",
       "3     2000-01-06    73.340363   111.459763   119.531250   111.459763   \n",
       "4     2000-01-07    67.473145   102.542969   102.542969   102.542969   \n",
       "...          ...          ...          ...          ...          ...   \n",
       "6203  2024-11-07  1803.050049  1803.050049  1825.699951  1787.000000   \n",
       "6204  2024-11-08  1829.949951  1829.949951  1840.599976  1813.150024   \n",
       "6205  2024-11-11  1860.099976  1860.099976  1868.000000  1822.550049   \n",
       "6206  2024-11-12  1868.800049  1868.800049  1881.000000  1861.000000   \n",
       "6207  2024-11-13  1868.400024  1868.400024  1873.199951  1856.300049   \n",
       "\n",
       "             Open      Volume  Open-Close   High-Low  Predicted_Signal  \\\n",
       "0      122.070312    657536.0   -0.001564   0.001564                 1   \n",
       "1      131.250000   7191808.0   -0.436722   4.861328                 1   \n",
       "2      122.664062  21069440.0    1.512108   5.801170                 1   \n",
       "3      119.192581  10495616.0    7.732819   8.071487                 1   \n",
       "4      102.542969    971392.0    0.000000   0.000000                 1   \n",
       "...           ...         ...         ...        ...               ...   \n",
       "6203  1812.949951   4550965.0    9.899902  38.699951                 0   \n",
       "6204  1818.000000   4210960.0  -11.949951  27.449951                 0   \n",
       "6205  1829.000000   3804234.0  -31.099976  45.449951                 0   \n",
       "6206  1871.099976   5012450.0    2.299927  20.000000                 1   \n",
       "6207  1861.099976   4256877.0   -7.300049  16.899902                 0   \n",
       "\n",
       "        Return  Strategy_Return   Cum_Ret  Cum_Strategy  \n",
       "0          NaN              NaN       NaN           NaN  \n",
       "1     0.078764         0.078764  0.078764      0.078764  \n",
       "2    -0.079999        -0.079999 -0.001235     -0.001235  \n",
       "3    -0.080000        -0.080000 -0.081235     -0.081235  \n",
       "4    -0.080000        -0.080000 -0.161235     -0.161235  \n",
       "...        ...              ...       ...           ...  \n",
       "6203 -0.011323        -0.011323  4.308342      4.837418  \n",
       "6204  0.014919         0.000000  4.323261      4.837418  \n",
       "6205  0.016476         0.000000  4.339737      4.837418  \n",
       "6206  0.004677         0.000000  4.344414      4.837418  \n",
       "6207 -0.000214        -0.000214  4.344200      4.837203  \n",
       "\n",
       "[6208 rows x 14 columns]"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Plot Strategy Cumulative returns\n",
    "df['Cum_Strategy'] = df['Strategy_Return'].cumsum()\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 445
    },
    "id": "rNbTJs4fIMip",
    "outputId": "0351e9db-a7f1-4ba3-b5bb-d2b0c86005b9"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DeltaGenerator()"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Assuming 'df' is a DataFrame that contains 'Cum_Ret' and 'Cum_Strategy' columns\n",
    "\n",
    "# Create a plot\n",
    "fig, ax = plt.subplots()\n",
    "ax.plot(df['Cum_Ret'], color='red', label='Cumulative Return')\n",
    "ax.plot(df['Cum_Strategy'], color='blue', label='Cumulative Strategy')\n",
    "ax.set_title(\"Cumulative Return vs Strategy\")\n",
    "ax.set_xlabel(\"Time\")\n",
    "ax.set_ylabel(\"Value\")\n",
    "ax.legend()\n",
    "\n",
    "# Display the plot in Streamlit\n",
    "st.pyplot(fig)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DeltaGenerator()"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "A = ((df['Cum_Strategy'] - df['Cum_Ret']) / df['Cum_Ret']) * 100\n",
    "mean = np.mean(A)\n",
    "\n",
    "# Display the mean value in Streamlit\n",
    "st.write(\"Mean Percentage Difference:\")\n",
    "st.metric(label=\"Mean Difference (%)\", value=f\"{mean:.2f}\")"
   ]
  }
 ],
 "metadata": {
  "colab": {
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
